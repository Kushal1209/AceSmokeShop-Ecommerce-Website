@using AceSmokeShop.ViewModel
@model AdminFinancialViewModel

@{
    ViewData["Title"] = "Admin Page";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    List<string> months = new List<string>{ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec" };
}

<div class="container-fluid" style="padding: 0rem 7rem;">
    <div class="mt-3">
        <div class="row">
            <div class="col-md-3">
                <div class="card border-left-primary shadow h-100 py-2" style="width: 15rem;">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Current Balance
                                </div>
                                <div class="h6 mb-0 font-weight-bold text-gray-800">$@(Math.Floor(Model.currentBalance * 100) / 100)</div>
                            </div>
                            <div class="col-auto">
                                <i class="fa-solid fa-sack-dollar text-gray-300" style="font-size:2rem;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-block">Pay Out</button>
            </div>
        </div>
    </div>
@*    <input type="hidden" id="yValues" value=@Model.yValues[0] />
    <input type="hidden" id="xValues" value=@Model.xValues[0]/>*@
    <div class="mt-3">
        <div class="row">
            <div class="col-md-2">
                <div class="card border-left-primary shadow h-100 py-2" style="width: 12rem;">
                    <div class="card-body" style="padding: 1.5rem 1rem;">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Total Revenue
                                </div>
                                <div class="h6 mb-0 font-weight-bold text-gray-800">$@(Math.Floor(Model.TotalRevenue * 100) / 100)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-left-primary shadow h-100 py-2" style="width: 12rem;">
                    <div class="card-body" style="padding: 1.5rem 1rem;">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Vendor Revenue
                                </div>
                                <input type="hidden" id="vendorRevenue" value="@(Math.Floor(Model.VendorRevenue * 100) / 100)" />
                                <div class="h6 mb-0 font-weight-bold text-gray-800">$@(Math.Floor(Model.VendorRevenue * 100) / 100)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-left-primary shadow h-100 py-2" style="width: 12rem;">
                    <div class="card-body" style="padding: 1.5rem 1rem;">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    User Revenue
                                </div>
                                 <input type="hidden" id="userRevenue" value="@(Math.Floor(Model.UserRevenue * 100) / 100)" />
                                <div class="h6 mb-0 font-weight-bold text-gray-800">$@(Math.Floor(Model.UserRevenue * 100) / 100)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-left-primary shadow h-100 py-2" style="width: 12rem;">
                    <div class="card-body" style="padding: 1.5rem 1rem;">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Tax Collected
                                </div>
                                <div class="h6 mb-0 font-weight-bold text-gray-800">$@(Math.Floor(Model.TaxCollected * 100) / 100)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-left-primary shadow h-100 py-2" style="width: 12rem;">
                    <div class="card-body" style="padding: 1.5rem 1rem;">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Card Payment
                                </div>
                                <div class="h6 mb-0 font-weight-bold text-gray-800">$@(Math.Floor(Model.CardPayment * 100) / 100)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-left-primary shadow h-100 py-2" style="width: 12rem;">
                    <div class="card-body" style="padding: 1.5rem 1rem;">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    In-Store Payment
                                </div>
                                <div class="h6 mb-0 font-weight-bold text-gray-800">$@(Math.Floor(Model.InStorePayment * 100) / 100)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        @***************   BarGraph    *****************@
        @*<canvas id="myChart2" style="width:100%;max-width:600px"></canvas>*@

        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4" style="width: 100%; height: 100%;">
                <!-- Card Header - Dropdown -->
                <div
                    class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Earnings Overview</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-area" style="height: 227px;">
                        <canvas id="myAreaChart"></canvas>
                    </div>
                </div>
            </div>
        </div>


        @***************   Pie Chart    *****************@
        @*<canvas id="myChart" style="width:100%;max-width:600px"></canvas>*@

        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4" style="width: 100%; height: 100%;">
                <!-- Card Header -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Revenue Sources</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="myPieChart" ></canvas>
                    </div>
                    <div class="mt-4 text-center small">
                        <span class="mr-2">
                            <i class="fas fa-circle text-primary"></i> Vendor
                        </span>
                        <span class="mr-2">
                            <i class="fas fa-circle text-success"></i> User
                        </span>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="mt-5">
        <div class="row">
            <div class="col-3">
                <div class="input-group mb-3">
                    <input type="hidden" asp-for="@Model.Period" id="period" />
                    @if(Model.Period == 1){
                          <button class="btn btn-outline-secondary" style="color: #fff;background-color: #6c757d;border-color: #6c757d;" onclick="PeriodbtnClick(1)" type="button">MONTH</button>
                          <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(2)" type="button">6 MONTHS</button>
                          <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(3)" type="button">1 YEAR</button>
                    }
                    else if(Model.Period == 2){
                          <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(1)" type="button">MONTH</button>
                          <button class="btn btn-outline-secondary"  style="color: #fff;background-color: #6c757d;border-color: #6c757d;" onclick="PeriodbtnClick(2)" type="button">6 MONTHS</button>
                          <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(3)" type="button">1 YEAR</button>
                    }
                    else if(Model.Period == 3){
                         <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(1)" type="button">MONTH</button>
                         <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(2)" type="button">6 MONTHS</button>
                         <button class="btn btn-outline-secondary" style="color: #fff;background-color: #6c757d;border-color: #6c757d;" onclick="PeriodbtnClick(3)" type="button">1 YEAR</button>
                    }
                    else{
                         <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(1)" type="button">MONTH</button>
                         <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(2)" type="button">6 MONTHS</button>
                         <button class="btn btn-outline-secondary" onclick="PeriodbtnClick(3)" type="button">1 YEAR</button>
                    }
                   
                </div>
            </div>
            <div class="col-2">
                <input asp-for="@Model.DateFrom" id="datefrom" class="form-control" />
            </div>
            <div class="col-2">
                <input asp-for="@Model.DateTo" id="dateto" class="form-control" />
            </div>
            <div class="col-2">
                <button type="button" class="btn btn-block" id="AdminIndexfliterbtnsearch">Search</button>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <div class="Paginationblock">
            <div class="row">
                <div class="col-md-4" style="padding: 5px 25px;">
                    <div class="form-group">
                        <label style="color: #000;">Rows</label>
                       <select asp-for=@Model.ItemsPerPage id="rowselectId" class="RowSelect"
                            asp-items="@(new SelectList(@Model.RowPerPage))">
                       </select>
                   </div>
                </div>
                <div class="col-md-4" style="padding: 7px 15px;">
                    <div style="text-align: center;">
                        <label style="color: #000;">Showing @Model.CurrentPage / @Model.TotalPages</label>
                    </div>
                </div>
                <div class="col-md-4" style="justify-content:end; padding: 5px 25px;">
                    <input type="hidden" id="cuttentpageid" value="@Model.CurrentPage" />
                    <input type="hidden" id="totalpageid" value="@Model.TotalPages" />
                    <div style="text-align: end;">
                        <button type="button" id="prebtnClick" hidden=@(Model.CurrentPage == 1? true : false) class="Paginationbtn">Previous</button>
                        <button type="button" id="nextbtnClick" hidden=@(Model.CurrentPage == Model.TotalPages? true : false) class="Paginationbtn">Next</button>
                    </div>
                </div>
            </div>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th class="col-2">
                        <a class="h6 text-uppercase font-weight-bold" style="color: #145DA0; font-size: 14px">
                            OrderId
                        </a>
                    </th>
                    <th class="col-3">
                        <a class="h6 text-uppercase font-weight-bold" style="color: #145DA0; font-size: 14px">
                            PaymentId
                        </a>
                    </th>
                    <th class="col-2">
                        <a class="h6 text-uppercase font-weight-bold" style="color: #145DA0; font-size: 14px">
                            Method
                        </a>
                    </th>
                    <th class="col-2">
                        <a class="h6 text-uppercase font-weight-bold" style="color: #145DA0; font-size: 14px">
                            Status
                        </a>
                    </th>
                    <th class="col-2">
                        <a class="h6 text-uppercase font-weight-bold" style="color: #145DA0; font-size: 14px">
                            Create Date
                        </a>
                    </th>
                    <th class="col-1">
                        <a class="h6 text-uppercase font-weight-bold" style="color: #145DA0; font-size: 14px">
                            Amount
                        </a>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach(var item in Model.ListofTransactions)
                {
                    <tr>
                        <td class="col-2">
                            <a>@item.UserRole - @item.OrderId</a>
                        </td>
                        <td class="col-3">
                            <a>@item.PaymentIntentId</a>
                        </td>
                        <td class="col-2">
                            <a>@item.PaymentMethod</a>
                        </td>
                        <td class="col-2">
                            <a>@item.Status</a>
                        </td>
                        <td class="col-2">
                            <a>@item.CreateDate.Day-@months[@item.CreateDate.Month -1]-@item.CreateDate.Year</a>
                        </td>
                        <td class="col-1">
                            <a>$@item.Amount</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>

        //*****  PieChart Script  *****//

        //var xV = ["Vendor", "User"];
        //var userRevenue = Math.floor(parseFloat($('#userRevenue').val()) * 100)/100;
        //var vendorRevenue = Math.floor(parseFloat($('#vendorRevenue').val())*100)/100;
        //var Total = userRevenue + vendorRevenue;
        //Total = Math.floor(Total * 100) / 100;
        //userRevenue = Math.floor(((userRevenue * 100) / Total) * 100)/100;
        //vendorRevenue = 100 - userRevenue;
        //var yV = [vendorRevenue, userRevenue];
        //var barColors = [
        //  "#b91d47",
        //  "#00aba9"
        //];

        //new Chart("myChart", {
        //  type: "doughnut",
        //  data: {
        //    labels: xV,
        //    datasets: [{
        //      backgroundColor: barColors,
        //      data: yV
        //    }]
        //  },
        //  options: {
        //    title: {
        //      display: true,
        //      text: "Revenue Breakdown"
        //    }
        //  }
        //});

        var ctx = document.getElementById("myPieChart");
        var xV = ["Vendor", "User"];
        var userRevenue = Math.floor(parseFloat($('#userRevenue').val()) * 100) / 100;
        var vendorRevenue = Math.floor(parseFloat($('#vendorRevenue').val()) * 100) / 100;
        var Total = userRevenue + vendorRevenue;
        Total = Math.floor(Total * 100) / 100;
        userRevenue = Math.floor(((userRevenue * 100) / Total) * 100) / 100;
        vendorRevenue = 100 - userRevenue;
        var yV = [vendorRevenue, userRevenue];
        var myPieChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
            labels: xV,
            datasets: [{
                data: yV,
                backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc'],
                hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf'],
                hoverBorderColor: "rgba(234, 236, 244, 1)",
            }],
            },
            options: {
            maintainAspectRatio: false,
            tooltips: {
                backgroundColor: "rgb(255,255,255)",
                bodyFontColor: "#858796",
                borderColor: '#dddfeb',
                borderWidth: 2,
                xPadding: 15,
                yPadding: 15,
                displayColors: false,
                caretPadding: 10,
            },
            legend: {
                display: false
            },
            cutoutPercentage: 80,
            },
        });

        //*****  Linear-Graph Script  *****//

        function number_format(number, decimals, dec_point, thousands_sep) {
          // *     example: number_format(1234.56, 2, ',', ' ');
          // *     return: '1 234,56'
          number = (number + '').replace(',', '').replace(' ', '');
          var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
            s = '',
            toFixedFix = function(n, prec) {
              var k = Math.pow(10, prec);
              return '' + Math.round(n * k) / k;
            };
          // Fix for IE parseFloat(0.55).toFixed(0) = 0;
          s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
          if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
          }
          if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
          }
          return s.join(dec);
        }

        // Area Chart Example
        var ctx = document.getElementById("myAreaChart");
        var myLineChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            datasets: [{
              label: "Earnings",
              lineTension: 0.3,
              backgroundColor: "rgba(78, 115, 223, 0.05)",
              borderColor: "rgba(78, 115, 223, 1)",
              pointRadius: 3,
              pointBackgroundColor: "rgba(78, 115, 223, 1)",
              pointBorderColor: "rgba(78, 115, 223, 1)",
              pointHoverRadius: 3,
              pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
              pointHoverBorderColor: "rgba(78, 115, 223, 1)",
              pointHitRadius: 10,
              pointBorderWidth: 2,
              data: [0, 10000, 5000, 15000, 10000, 20000, 15000, 25000, 20000, 30000, 25000, 40000],
            }],
          },
          options: {
            maintainAspectRatio: false,
            layout: {
              padding: {
                left: 10,
                right: 25,
                top: 25,
                bottom: 0
              }
            },
            scales: {
              xAxes: [{
                time: {
                  unit: 'date'
                },
                gridLines: {
                  display: false,
                  drawBorder: false
                },
                ticks: {
                  maxTicksLimit: 7
                }
              }],
              yAxes: [{
                ticks: {
                  maxTicksLimit: 5,
                  padding: 10,
                  // Include a dollar sign in the ticks
                  callback: function(value, index, values) {
                      return '₹' + number_format(value);
                  }
                },
                gridLines: {
                  color: "rgb(234, 236, 244)",
                  zeroLineColor: "rgb(234, 236, 244)",
                  drawBorder: false,
                  borderDash: [2],
                  zeroLineBorderDash: [2]
                }
              }],
            },
            legend: {
              display: false
            },
            tooltips: {
              backgroundColor: "rgb(255,255,255)",
              bodyFontColor: "#858796",
              titleMarginBottom: 10,
              titleFontColor: '#6e707e',
              titleFontSize: 14,
              borderColor: '#dddfeb',
              borderWidth: 1,
              xPadding: 15,
              yPadding: 15,
              displayColors: false,
              intersect: false,
              mode: 'index',
              caretPadding: 10,
              callbacks: {
                label: function(tooltipItem, chart) {
                  var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                      return datasetLabel + ': ₹' + number_format(tooltipItem.yLabel);
                }
              }
            }
          }
        });

        //var xVal = document.getElementById('xValues').val();
        // const idList = [];
        //    xVal.forEach((item) => {
        //        idList[i] = item.id;
        //        i++;
        //    });

        //var yVal = $('#yValues').val();

        //new Chart("myChart2", {
        //  type: "line",
        //  data: {
        //    labels: xVal,
        //    datasets: [{
        //      fill: false,
        //      lineTension: 0,
        //      backgroundColor: "rgba(0,0,255,1.0)",
        //      borderColor: "rgba(0,0,255,0.1)",
        //      data: yVal
        //    }]
        //  },
        //  options: {
        //    legend: {display: false},
        //    scales: {
        //      yAxes: [{ticks: {min: 6, max:16}}],
        //    }
        //  }
        //});
</script>
}
